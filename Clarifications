UI Framework: For a standalone terminal app in Rust, which approach would you prefer?

Terminal UI (TUI) using libraries like ratatui (text-based, runs in terminal)
GUI using egui, iced, or tauri (graphical window)
Web-based UI with Tauri (hybrid approach)
Model Integration: When you say "use any model you provide it with":

-It can be TUI or GUI. Would GUI be more challenging? If not lets go with one of egui, iced, or tauri that you think is most appropriate


Do you want to support multiple LLM providers (OpenAI, Anthropic, local models via Ollama, etc.)?
Should it support streaming responses?
Any preference for the AI SDK (async OpenAI client, LangChain equivalent, custom implementation)?

-Yes, multiple providers, for starters let's do ollama, groq and OpenAI


MCP (Model Context Protocol) Servers:

Should the terminal be able to spawn/manage MCP server processes?
- Yes
Or just connect to existing MCP servers via stdio/HTTP?
Do you want the ability to add/remove MCP servers at runtime or just via config file?



Block Workflows (similar to Warp's blocks):

Should blocks support: command input, output, AI suggestions, editing past commands?
-Each command should be a block that can be copied and pasted with output or command or both.
Do you want persistent history/sessions that can be saved/loaded?
-Yes
Should blocks be collapsible/expandable?
-Yes
Command Execution:

Should it support all standard shell features (pipes, redirects, environment variables)?
- Yes
Do you want to use an existing shell (bash/zsh) as backend or implement shell logic?
- It can use bash as backend
Any special handling for long-running processes, background jobs?
-Should be able to show them
Additional Features (priority order would help):

Command completion/suggestions
Syntax highlighting
Multi-pane/split views
Themes/customization
Keyboard shortcuts
Search through history/output
- Yes to all of them like warp
Target Platforms:

Linux only, or also macOS/Windows?
-Linux for starters